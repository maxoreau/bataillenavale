package com.maxoreau.springboot.bataillenavale.controllers;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maxoreau.springboot.bataillenavale.factories.PlayerFactory;
import com.maxoreau.springboot.bataillenavale.jsonmodels.GameJson;
import com.maxoreau.springboot.bataillenavale.jsonmodels.PlayerJson;
import com.maxoreau.springboot.bataillenavale.models.Game;
import com.maxoreau.springboot.bataillenavale.models.GameManager;
import com.maxoreau.springboot.bataillenavale.models.Player;
import com.maxoreau.springboot.bataillenavale.repositories.GameRepository;
import com.maxoreau.springboot.bataillenavale.repositories.PlayerRepository;


@RestController				
@RequestMapping("/battleship")	// This means URL's start with /battleship (after Application path)
public class RESTGameController {
	
						// This means to get the bean called userRepository
	@Autowired			// Which is auto-generated by Spring, we will use it to handle the data
	private GameRepository gameRepo;
	
	@Autowired
	private PlayerRepository playerRepo;
	
	@Autowired
	private GameManager gameManager;
    
	
    @PostMapping // Map ONLY POST Requests
	public boolean createPlayer (@RequestBody Player player) {
    	System.out.println("Rest createPlayer() entered");
    	System.out.println(player);
    	return gameManager.addPlayer(player);
	}
    
    @GetMapping("/players")
	public List<PlayerJson> getAllPlayers() {
		// This returns a JSON or XML with the users
    	System.out.println("Rest getAllPlayers() entered");
    	List<PlayerJson> players = new ArrayList<>();
    	PlayerJson playerJson;
    	for (Player p : gameManager.getPlayers()) {
			playerJson = new PlayerJson(p);
			players.add(playerJson);
		}
		return players;
	}

	@GetMapping("/openGames")
	public List<Game> getOpenGames() {
		// This returns a JSON or XML with the users
    	System.out.println("Rest getAllGames() entered");
    	List<GameJson> games = new ArrayList<>();
    	GameJson gameJson;
    	for (Game g : gameManager.getOpenGames()) {
			gameJson = new GameJson();
			games.add(gameJson);
		}
		return (List<Game>) gameRepo.findAll();
	}
	
	@GetMapping("/{name}/mygames")
	public List<Game> getMyGames(@PathVariable("name") String name) {
		// This returns a JSON
    	System.out.println("Rest getMyGames() entered");
    	List<Game> myGames = new ArrayList<>();
    	myGames.addAll(gameRepo.findByPlayer1(playerRepo.findByName(name).get(0)));
    	myGames.addAll(gameRepo.findByPlayer2(playerRepo.findByName(name).get(0)));
		return myGames;
	}

}
